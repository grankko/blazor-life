@using BlazorLife.Game
@using BlazorLife.Client.Interop
@using System.Timers;
@inject GameService GameService

<div class="container">
    <div class="row" style="margin-top: 20px;">
        <div class="col-8">
            <button class="btn btn-primary" onclick="@Start">Start</button>
            <button class="btn btn-primary" onclick="@Stop">Stop</button>
            <button class="btn btn-secondary" onclick="@Reset">Reset</button>
            <button class="btn btn-secondary" onclick="@DrawNextGeneration">Step one generation</button>
        </div>
        <div class="col-4">
            <div>Current live cells: @GameService.NumberOfCurrentLiveCells</div>
            <div>Current generation: @GameService.CurrentGenerationNumber</div>
        </div>
    </div>
</div>

@functions {

    public bool IsRunning = false;
    private Timer _timer;

    const int CanvasCellSize = 5;
    const int SleepTimeBetweenGenerations = 100;

    protected override void OnInit()
    {
        CanvasFunctions.OnCanvasClicked += CanvasClicked;
        _timer = new Timer();
        _timer.Interval = SleepTimeBetweenGenerations;
        _timer.Elapsed += TimerElapsed;
    }

    protected void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        DrawNextGeneration();
    }

    protected override void OnAfterRender()
    {
        Reset();
    }

    protected void CanvasClicked(object sender, CanvasClickedEventArgs e)
    {
        int xValue = e.X / CanvasCellSize;
        int yValue = e.Y / CanvasCellSize;

        GameService.AddLife(xValue, yValue);

        DrawCurrentGeneration();
    }

    void DrawNextGeneration()
    {
        GameService.CreateNextGeneration();
        DrawCurrentGeneration();
    }

    void DrawCurrentGeneration()
    {
        var xCoordinates = new List<int>(GameService.AllLife.Select(life => life.X * CanvasCellSize)).ToList();
        var yCoordinates = new List<int>(GameService.AllLife.Select(life => life.Y * CanvasCellSize)).ToList();

        CanvasFunctions.ClearCanvas();
        CanvasFunctions.DrawCellsOnCanvas(xCoordinates, yCoordinates, CanvasCellSize);
        this.StateHasChanged();
    }

    void Start()
    {
        IsRunning = true;
        _timer.Enabled = true;
    }

    void Stop()
    {
        IsRunning = false;
        _timer.Enabled = false;
    }

    void Reset()
    {
        Stop();
        GameService.Reset();
        CanvasFunctions.ClearCanvas();

        // Generate a interesting start pattern
        GameService.AddLife(11, 8);
        GameService.AddLife(12, 9);
        GameService.AddLife(10, 10);
        GameService.AddLife(11, 10);
        GameService.AddLife(12, 10);

        DrawCurrentGeneration();
    }
}